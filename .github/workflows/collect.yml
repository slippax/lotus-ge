name: OSRS Data Collector
on:
  workflow_dispatch: # Manual trigger button
  repository_dispatch: # External trigger via API
    types: [collect-data]

permissions:
  contents: write # Required for git push

jobs:
  collect:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Get fresh Dropbox access token
        run: |
          echo "üîÑ Refreshing Dropbox access token..."

          # Get fresh access token using refresh token
          RESPONSE=$(curl -X POST https://api.dropboxapi.com/oauth2/token \
            -d grant_type=refresh_token \
            -d refresh_token="${{ secrets.DROPBOX_REFRESH_TOKEN }}" \
            -d client_id="${{ secrets.DROPBOX_APP_KEY }}" \
            -d client_secret="${{ secrets.DROPBOX_APP_SECRET }}" \
            --silent)

          # Extract access token from response
          ACCESS_TOKEN=$(echo "$RESPONSE" | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå Failed to refresh Dropbox access token"
            echo "Response: $RESPONSE"
            exit 1
          fi

          echo "‚úÖ Successfully refreshed Dropbox access token"
          # Store token for use in subsequent steps
          echo "FRESH_DROPBOX_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Download existing database
        run: |
          mkdir -p data
          echo "üîÑ Attempting to download existing database from Dropbox..."

          # Try to download existing database from Dropbox with fresh token
          HTTP_CODE=$(curl -X POST https://content.dropboxapi.com/2/files/download \
            --header "Authorization: Bearer $FRESH_DROPBOX_TOKEN" \
            --header "Dropbox-API-Arg: {\"path\": \"/osrsmarketdata.sqlite\"}" \
            --output data/osrsmarketdata.sqlite \
            --write-out "%{http_code}" \
            --silent)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Successfully downloaded existing database from Dropbox"
            ls -la data/osrsmarketdata.sqlite
          else
            echo "‚ùå Failed to download database from Dropbox"
            echo "HTTP Status Code: $HTTP_CODE"

            # Get detailed error information
            echo "üîç Attempting to get detailed error information..."
            curl -X POST https://content.dropboxapi.com/2/files/download \
              --header "Authorization: Bearer $FRESH_DROPBOX_TOKEN" \
              --header "Dropbox-API-Arg: {\"path\": \"/osrsmarketdata.sqlite\"}" \
              --output /dev/null \
              --include \
              --silent || true

            echo "üö® CRITICAL: Cannot proceed without existing database - this would lose historical data!"
            echo "Please check:"
            echo "1. Dropbox refresh token validity"
            echo "2. Database file exists at /osrsmarketdata.sqlite in Dropbox"
            echo "3. Dropbox API service status"
            exit 1
          fi

      - name: Collect OSRS data
        run: python collect.py

      - name: Upload updated database
        run: |
          echo "üîÑ Uploading updated database back to Dropbox..."

          # Verify database file exists and has reasonable size
          if [ ! -f "data/osrsmarketdata.sqlite" ]; then
            echo "‚ùå Database file not found - cannot upload"
            exit 1
          fi

          DB_SIZE=$(stat -f%z data/osrsmarketdata.sqlite 2>/dev/null || stat -c%s data/osrsmarketdata.sqlite 2>/dev/null)
          echo "üìä Database size: $DB_SIZE bytes"

          if [ "$DB_SIZE" -lt 1000 ]; then
            echo "‚ùå Database file too small ($DB_SIZE bytes) - likely corrupted"
            exit 1
          fi

          # Upload updated database back to Dropbox with error handling using fresh token
          HTTP_CODE=$(curl -X POST https://content.dropboxapi.com/2/files/upload \
            --header "Authorization: Bearer $FRESH_DROPBOX_TOKEN" \
            --header "Dropbox-API-Arg: {\"path\": \"/osrsmarketdata.sqlite\", \"mode\": \"overwrite\"}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @data/osrsmarketdata.sqlite \
            --write-out "%{http_code}" \
            --silent)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Successfully uploaded updated database to Dropbox"
          else
            echo "‚ùå Failed to upload database to Dropbox"
            echo "HTTP Status Code: $HTTP_CODE"
            echo "üö® WARNING: Database changes not backed up to Dropbox!"
            exit 1
          fi

      - name: Commit and push data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "OSRS Data Collector"
          git add data/
          if ! git diff --staged --quiet; then
            git commit -m "Data collection: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
            echo "‚úì Data committed and pushed"

            # Notify users of instant data update
            curl -X POST "https://ntfy.sh/osrs-ge-lotus-updates" \
              -H "Title: OSRS Market Data Updated" \
              -d "refresh"
          else
            echo "‚Ñπ No changes to commit"
          fi
